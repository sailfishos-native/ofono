diff --git a/src/voicecall.c b/src/voicecall.c
index b77275fe..e48d5ad3 100644
--- a/src/voicecall.c
+++ b/src/voicecall.c
@@ -113,6 +113,55 @@ static void hangup_all_active(const struct ofono_error *error, void *data);
 static void multirelease_callback(const struct ofono_error *err, void *data);
 static gboolean tone_request_run(gpointer user_data);
 
+/** Sysfs/wakelock support */
+static const char sysfs_lock_path[] = "/sys/power/wake_lock";
+static const char sysfs_unlock_path[] = "/sys/power/wake_unlock";
+static const char lock_name[] = "ofono_voicecall";
+static bool sysfs_write(const char *path, const char *data, int size);
+
+/** Helper for writing to sysfs files
+ */
+static bool
+sysfs_write(const char *path, const char *data, int size)
+{
+	bool res = false;
+	int  fd  = -1;
+
+	if( !path || !data || size <= 0 )
+		goto cleanup;
+
+	if( (fd = open(path, O_WRONLY)) == -1 )
+		goto cleanup;
+
+	if( write(fd, data, size) == -1 )
+		goto cleanup;
+
+	res = true;
+
+	cleanup:
+	if( fd != -1 ) close(fd);
+
+	return res;
+}
+
+/** Async signal safe wakelock obtain
+ */
+static bool
+lock_lock(void)
+{
+	return sysfs_write(sysfs_lock_path, lock_name,
+					   sizeof lock_name - 1);
+}
+
+/** Async signal safe wakelock release
+ */
+static bool
+lock_unlock(void)
+{
+	return sysfs_write(sysfs_unlock_path, lock_name,
+					   sizeof lock_name - 1);
+}
+
 static gint call_compare_by_id(gconstpointer a, gconstpointer b)
 {
 	const struct ofono_call *call = ((struct voicecall *)a)->call;
@@ -584,6 +633,9 @@ static DBusMessage *voicecall_hangup(DBusConnection *conn,
 			vc->pending = dbus_message_ref(msg);
 			vc->driver->hangup_all(vc, generic_callback, vc);
 
+			if (!lock_unlock())
+				ofono_error("Unable to release wakelock");
+
 			return NULL;
 		}
 
@@ -592,6 +644,9 @@ static DBusMessage *voicecall_hangup(DBusConnection *conn,
 			vc->pending = dbus_message_ref(msg);
 			vc->driver->hangup_active(vc, generic_callback, vc);
 
+			if (!lock_unlock())
+				ofono_error("Unable to release wakelock");
+
 			return NULL;
 		}
 
@@ -906,6 +961,9 @@ static void voicecall_set_call_status(struct voicecall *call, int status)
 
 		if (call->vc->dial_req && call == call->vc->dial_req->call)
 			dial_request_finish(call->vc);
+
+		if( !lock_lock() )
+			ofono_error("failed to obtain wakelock");
 	}
 
 	if (status == CALL_STATUS_DISCONNECTED && call->vc->dial_req &&
@@ -2353,6 +2411,11 @@ void ofono_voicecall_disconnected(struct ofono_voicecall *vc, int id,
 	voicecall_dbus_unregister(vc, call);
 
 	vc->call_list = g_slist_remove(vc->call_list, call);
+
+	if (g_slist_length(vc->call_list) == 0) {
+		if (!lock_unlock())
+			ofono_error("Unable to release wakelock");
+	}
 }
 
 void ofono_voicecall_notify(struct ofono_voicecall *vc,
